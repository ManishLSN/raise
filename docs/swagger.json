{
  "swagger": "2.0",
  "info": {
    "version": "0.4.0",
    "title": "UIoT RAISe API",
    "description": "RAISe is an open source <b>Internet of Things</b> middleware. RAISe uses restful services as communication pattern. <br><br>RAISe is an <b>Internet of Things</b> open web service open middleware. Made to handle and store knowledge and be a restful service layer for IoT applications, clients and devices. <br><br><b>RAISe</b> is open source, and maintained by the [Universal Internet of Things](https://uiot.org) open source project and the [University of Bras√≠lia](http://www.unb.br).<br><br><b>Security Note:</b> RAISe uses [JWT](https://jwt.io) for Token Schemas.",
    "contact": {
      "email": "contact@uiot.org"
    },
    "license": {
      "name": "Apache 2",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "basePath": "/",
  "securityDefinitions": {
    "apiKey": {
      "type": "apiKey",
      "name": "token",
      "description": "The Token it's the onliest way to authorize your requestes within RAISe. A Token it's obtained by registering a Client on RAISe. The Token allows you interact with RAISe only with Data, Clients and Services related with your Client.<br><b>Example:</b> `<TOKEN>`",
      "in": "header"
    }
  },
  "schemes": [
    "https"
  ],
  "parameters": {
    "auth-token": {
      "name": "token",
      "in": "query",
      "required": true,
      "description": "client token",
      "type": "string"
    }
  },
  "tags": [
    {
      "name": "client",
      "description": "Clients of the Network"
    },
    {
      "name": "service",
      "description": "Services of a Client, they describes the processes of a Client"
    },
    {
      "name": "data",
      "description": "Data of Services, the knowledge layer of RAISe"
    }
  ],
  "paths": {
    "/client": {
      "get": {
        "tags": [
          "client"
        ],
        "description": "List a set of Clients using multiple parameters to filter the result data set.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter by Client Names.<br><b>Example:</b> `Humidity Sensor`",
            "required": false,
            "type": "string"
          },
          {
            "name": "processor",
            "in": "query",
            "description": "Filter by Client Processor Type.<br><b>Example:</b> `Texas Instruments XXX`",
            "required": false,
            "type": "string"
          },
          {
            "name": "channel",
            "in": "query",
            "description": "Filter By Client Communication Channel.<br><b>Example:</b> `IEEE 802.11b`",
            "required": false,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "query",
            "description": "Filter By Client MAC Address.<br><b>Example:</b> `FF:FF:FF:FF:FF`",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Filter by a specific <b>group</b> tag that was given on the register of a set of clients. As an example you can group clients by tags. <br><b>Example:</b> `tag1:tag2:tag3`",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "You can limit the **size** of the result set of Clients on the response.<br><b>Example:</b> `20`",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "You can Order the Result by a specific order. The Clients **will** be ordered by their `serverTime`, you can order by Ascending Timestamp or Descending Timestamp.<br><b>Example:</b> `true` (ASCENDING) `false` (DESCENDING)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "interval",
            "in": "query",
            "description": "You can Filter the Result set in a given `UNIX TIMESTAMP` interval. <br><b>Example:</b> `1451606400:1483228800` <i>(Between 2016 and 2017)</i>.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "schema": {
              "required": [
                "code",
                "clients"
              ],
              "title": "clients",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "example": 200
                },
                "message": {
                  "type": "string",
                  "example": "Success"
                },
                "clients": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Client"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403"
            }
          }
        }
      }
    },
    "/client/register": {
      "post": {
        "tags": [
          "client"
        ],
        "description": "Register a Client within RAISe",
        "parameters": [
          {
            "name": "client",
            "in": "body",
            "required": true,
            "description": "Client Document",
            "schema": {
              "$ref": "#/definitions/ClientRegister"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TokenResponseClient"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/Error422"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "$ref": "#/definitions/Error429"
            }
          }
        }
      }
    },
    "/client/revalidate": {
      "post": {
        "tags": [
          "client"
        ],
        "description": "Revalidate a Client when the Token Expires",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "name": "client",
            "in": "body",
            "required": true,
            "description": "The Desired Services that need to be Revalidated",
            "schema": {
              "$ref": "#/definitions/ClientRevalidate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TokenResponseClient"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401"
            }
          },
          "403": {
            "description": "Forbbiden",
            "schema": {
              "$ref": "#/definitions/Error403"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/Error422"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "$ref": "#/definitions/Error429"
            }
          }
        }
      }
    },
    "/service": {
      "get": {
        "tags": [
          "service"
        ],
        "description": "List a Result set of Services. Only Services linked to a Client are displayed",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter by the name of Services<br><b>Example:</b> `Air Cooler Temperature`",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter by the Unique Identifier of a Service<br><b>Example:</b> `019e61290e441bca691f24d5f53b002ab0960e74`",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Filter by a specific <b>group</b> tag that was given on the register of a set of services. As an example you can group services by tags. <br><b>Example:</b> `tag1:tag2:tag3`",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "You can limit the **size** of the result set of Services on the response.<br><b>Example:</b> `20`.",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "You can Order the Result by a specific order. The Services **will** be ordered by their `serverTime`, you can order by Ascending Timestamp or Descending Timestamp.<br><b>Example:</b> `true` (ASCENDING) `false` (DESCENDING)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "interval",
            "in": "query",
            "description": "You can Filter the Result set in a given `UNIX TIMESTAMP` interval. <br><b>Example:</b> `1451606400:1483228800` <i>(Between 2016 and 2017)</i>.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "schema": {
              "required": [
                "code",
                "services"
              ],
              "title": "Service",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "example": 200
                },
                "message": {
                  "type": "string",
                  "example": "Success"
                },
                "services": {
                  "$ref": "#/definitions/ServicesList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "$ref": "#/definitions/Error429"
            }
          }
        }
      }
    },
    "/service/register": {
      "post": {
        "tags": [
          "service"
        ],
        "description": "Register a set of Services within RAISe",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "name": "services",
            "in": "body",
            "required": true,
            "description": "A set of Services that will be registered on RAISe",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceRegister"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TokenResponseRegister"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401"
            }
          },
          "403": {
            "description": "Forbbiden",
            "schema": {
              "$ref": "#/definitions/Error403"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/Error422"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "$ref": "#/definitions/Error429"
            }
          }
        }
      }
    },
    "/data": {
      "get": {
        "tags": [
          "data"
        ],
        "description": "List a set of Data related to your Clients or Client Services",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "name": "parameter",
            "in": "query",
            "description": "Filter by a Parameter of the Data <i>(The Property of a Data Set)</i><br><b>Example:</b> `humidity`",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceId",
            "in": "query",
            "description": "Filter by the ServiceId, since Data is related to Services.<br><b>Example:</b> `019e61290e441bca691f24d5f53b002ab0960e74`",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Filter by a specific <b>group</b> tag that was given on the register of a set of data. As an example you can group data by tags. <br><b>Example:</b> `tag1:tag2:tag3`",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "You can limit the **size** of the result set of Data on the response.<br><b>Example:</b> `20`.",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "You can Order the Result by a specific order. The Data **will** be ordered by their `serverTime`, you can order by Ascending Timestamp or Descending Timestamp.<br><b>Example:</b> `true` (ASCENDING) `false` (DESCENDING)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "interval",
            "in": "query",
            "description": "You can Filter the Result set in a given `UNIX TIMESTAMP` interval. <br><b>Example:</b> `1451606400:1483228800` <i>(Between 2016 and 2017)</i>.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "required": [
                "code",
                "data"
              ],
              "title": "Service",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "example": 200
                },
                "message": {
                  "type": "string",
                  "example": "Success"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Data"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "$ref": "#/definitions/Error429"
            }
          }
        }
      }
    },
    "/data/register": {
      "post": {
        "tags": [
          "data"
        ],
        "description": "Register a set of Data on RAISe",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "description": "A set of Data that will be registered on RAIse",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataRegister"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TokenResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error400"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error401"
            }
          },
          "403": {
            "description": "Forbbiden",
            "schema": {
              "$ref": "#/definitions/Error403"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/Error422"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "$ref": "#/definitions/Error429"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ClientRegister": {
      "required": [
        "name",
        "chipset",
        "mac",
        "serial",
        "processor",
        "channel"
      ],
      "type": "object",
      "properties": {
        "clientTime": {
          "type": "number",
          "example": 1000000000.1111
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "example-tag"
          }
        },
        "name": {
          "type": "string",
          "example": "Raspberry PI"
        },
        "chipset": {
          "type": "string",
          "example": "AMD 790FX"
        },
        "mac": {
          "type": "string",
          "example": "FF:FF:FF:FF:FF:FF"
        },
        "serial": {
          "type": "string",
          "example": "C210"
        },
        "processor": {
          "type": "string",
          "example": "Intel I3"
        },
        "channel": {
          "type": "string",
          "example": "Ethernet"
        },
        "location": {
          "type": "string",
          "example": "-15.7757876:-48.077829"
        }
      }
    },
    "ClientRevalidate": {
      "required": [
        "services",
        "location"
      ],
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "integer",
            "example": 13
          }
        },
        "location": {
          "type": "string",
          "example": "-15.7757876:-48.077829"
        }
      }
    },
    "Client": {
      "required": [
        "name",
        "chipset",
        "mac",
        "serial",
        "processor",
        "channel",
        "location"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Raspberry PI"
        },
        "chipset": {
          "type": "string",
          "example": "AMD 790FX"
        },
        "mac": {
          "type": "string",
          "example": "FF:FF:FF:FF:FF:FF"
        },
        "serial": {
          "type": "string",
          "example": "C210"
        },
        "processor": {
          "type": "string",
          "example": "Intel I3"
        },
        "channel": {
          "type": "string",
          "example": "Ethernet"
        },
        "location": {
          "type": "string",
          "example": "-15.7757876:-48.077829"
        },
        "clientTime": {
          "type": "number",
          "example": 1000000000.100000
        }
      }
    },
    "DataRegister": {
      "type": "object",
      "required": [
        "order",
        "values",
        "serviceId"
      ],
      "properties": {
        "clientTime": {
          "type": "number",
          "example": 1000000000.100000
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "example-tag"
          }
        },
        "serviceId": {
          "type": "string",
          "example": "019e61290e441bca691f24d5f53b002ab0960e74"
        },
        "order": {
          "type": "array",
          "example": [
            "humidity",
            "temperature"
          ]
        },
        "values": {
          "type": "array",
          "example": [
            [
              20.2,
              30.0
            ]
          ]
        }
      }
    },
    "Data": {
      "required": [
        "values",
        "serviceId"
      ],
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string",
          "example": "019e61290e441bca691f24d5f53b002ab0960e74"
        },
        "parameters": {
          "type": "array",
          "example": [
            "humidity",
            "temperature"
          ]
        },
        "values": {
          "type": "array",
          "example": [
            [
              20.2,
              30.0
            ]
          ]
        },
        "clientTime": {
          "type": "number",
          "example": 1000000000.100000
        }
      }
    },
    "ServiceRegister": {
      "type": "object",
      "required": [
        "name",
        "parameters",
        "returnType"
      ],
      "properties": {
        "clientTime": {
          "type": "number",
          "example": 1000000000.100000
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "example-tag"
          }
        },
        "name": {
          "type": "string",
          "example": "Get temp"
        },
        "parameters": {
          "$ref": "#/definitions/Parameter"
        },
        "returnType": {
          "type": "string",
          "example": "float"
        }
      }
    },
    "Service": {
      "type": "object",
      "required": [
        "name",
        "parameters",
        "returnType"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Get temp"
        },
        "parameters": {
          "$ref": "#/definitions/Parameter"
        },
        "returnType": {
          "type": "string",
          "example": "float"
        },
        "clientTime": {
          "type": "number",
          "example": 1000000000.100000
        }
      }
    },
    "ServicesList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Service"
      }
    },
    "Parameter": {
      "type": "array",
      "items": {
        "type": "string",
        "example": "example-tag"
      }
    },
    "Error400": {
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Bad Request"
        },
        "details": {
          "type": "string",
          "example": "Invalid Parameters Given"
        }
      }
    },
    "Error401": {
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "example": 401
        },
        "message": {
          "type": "string",
          "example": "Unauthorized"
        },
        "details": {
          "type": "string",
          "example": "Your Token is Invalid or Expired"
        }
      }
    },
    "Error403": {
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "example": 403
        },
        "message": {
          "type": "string",
          "example": "Forbidden"
        },
        "details": {
          "type": "string",
          "example": "You didn't provided a Token"
        }
      }
    },
    "Error422": {
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "example": 422
        },
        "message": {
          "type": "string",
          "example": "Unprocessable Entity"
        },
        "details": {
          "type": "string",
          "example": "The given jSON probably it's malformed"
        }
      }
    },
    "Error429": {
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "example": 429
        },
        "message": {
          "type": "string",
          "example": "Too many requests"
        },
        "details": {
          "type": "string",
          "example": "You reacehd the maximum API usage for the limit time interval"
        }
      }
    },
    "TokenResponseRegister": {
      "type": "object",
      "required": [
        "code",
        "message",
        "services"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "Success"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceRegisterResponse"
          }
        }
      }
    },
    "ServiceRegisterResponse": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "number",
          "example": 1151
        },
        "name": {
          "type": "string",
          "example": "Get temp"
        }
      }
    },
    "TokenResponseClient": {
      "type": "object",
      "required": [
        "code",
        "message",
        "token"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "Client Registered Successfully"
        },
        "token": {
          "type": "string",
          "example": "AAFFAAFFAAFFAAFF"
        }
      }
    },
    "TokenResponse": {
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "Success"
        }
      }
    }
  }
}