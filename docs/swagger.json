{
  "swagger": "2.0",
  "info": {
    "version": "0.4.0",
    "title": "UIoT RAISe API",
    "description": "RAISe is an open source <b>Internet of Things</b> middleware. RAISe uses restful services as communication pattern. <<More Description Later>>",
    "contact": {
      "email": "contact@uiot.org"
    },
    "license": {
      "name": "Apache 2",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "basePath": "/",
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "token",
      "in": "query"
    }
  },
  "schemes": [
    "https"
  ],
  "parameters": {
    "auth-token": {
      "name": "token",
      "in": "query",
      "required": true,
      "description": "client token",
      "type": "string"
    }
  },
  "paths": {
    "/client/list/": {
      "get": {
        "tags": [
          "client"
        ],
        "description": "Get registered clients",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "token obtained after registration",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "client name",
            "required": false,
            "type": "string"
          },
          {
            "name": "processor",
            "in": "query",
            "description": "client processor name",
            "required": false,
            "type": "string"
          },
          {
            "name": "channel",
            "in": "query",
            "description": "Channel label, as in WiFi, etc",
            "required": false,
            "type": "string"
          },
          {
            "name": "host",
            "in": "query",
            "description": "client host name (for example - ip, domain...)",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag",
            "in": "query",
            "description": "tag to specify certain type of clients; separate it by comas as in 'tag=Cebola,CebolaRoxa'",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the amount of entries in response ",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Will order the documents by the time they were processed (server time). Be aware of the combination LIMIT and ORDER, which gives preference to ORDER.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "required": [
                "code",
                "values"
              ],
              "title": "clients",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "example": 200
                },
                "values": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Client"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error400"
            }
          },
          "401": {
            "description": "Invalid or expired token",
            "schema": {
              "$ref": "#/definitions/Error401"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403"
            }
          }
        }
      }
    },
    "/client/register/": {
      "post": {
        "tags": [
          "client"
        ],
        "description": "Register a client",
        "parameters": [
          {
            "name": "client",
            "in": "body",
            "required": true,
            "description": "client attributes",
            "schema": {
              "$ref": "#/definitions/ClientRegister"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TokenResponseClient"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error400"
            }
          },
          "403": {
            "description": "Forbbiden",
            "schema": {
              "$ref": "#/definitions/Error403"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/Error422"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "$ref": "#/definitions/Error429"
            }
          }
        }
      }
    },
    "/client/revalidate/": {
      "post": {
        "tags": [
          "client"
        ],
        "description": "Revalidate a client and the services passed to do so",
        "parameters": [
          {
            "name": "client",
            "in": "body",
            "required": true,
            "description": "Client's token and IDs of services to revalidate",
            "schema": {
              "$ref": "#/definitions/ClientRevalidate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TokenResponseClient"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error400"
            }
          },
          "401": {
            "description": "Invalid or expired token",
            "schema": {
              "$ref": "#/definitions/Error401"
            }
          },
          "403": {
            "description": "Forbbiden",
            "schema": {
              "$ref": "#/definitions/Error403"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/Error422"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "$ref": "#/definitions/Error429"
            }
          }
        }
      }
    },
    "/service/list/": {
      "get": {
        "tags": [
          "service"
        ],
        "description": "Get registered services",
        "parameters": [
          {
            "$ref": "#/parameters/auth-token"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the amount of records for request. Used to prevent memory issues.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "tag",
            "in": "query",
            "description": "tag to specify certain type of services; separate it by comas as in 'tag=Cebola,CebolaRoxa'",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Will order the documents by the time they were processed (server time). Be aware of the combination LIMIT and ORDER, which gives preference to ORDER.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "service_name",
            "in": "query",
            "description": "The name of the service.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "required": [
                "code",
                "values"
              ],
              "title": "Service",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "example": 200
                },
                "values": {
                  "$ref": "#/definitions/ServicesList"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error400"
            }
          },
          "401": {
            "description": "Invalid or expired token",
            "schema": {
              "$ref": "#/definitions/Error401"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "$ref": "#/definitions/Error429"
            }
          }
        }
      }
    },
    "/service/register/": {
      "post": {
        "tags": [
          "service"
        ],
        "description": "Register an array of services",
        "parameters": [
          {
            "name": "services",
            "in": "body",
            "required": true,
            "description": "an array of services to be registered",
            "schema": {
              "$ref": "#/definitions/ServicesRegister"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "description": "indicates if service actuates on environment",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TokenResponseRegister"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error400"
            }
          },
          "401": {
            "description": "Invalid or expired token",
            "schema": {
              "$ref": "#/definitions/Error401"
            }
          },
          "403": {
            "description": "Forbbiden",
            "schema": {
              "$ref": "#/definitions/Error403"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/Error422"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "$ref": "#/definitions/Error429"
            }
          }
        }
      }
    },
    "/data/list/": {
      "get": {
        "tags": [
          "data"
        ],
        "description": "Get registered data",
        "parameters": [
          {
            "$ref": "#/parameters/auth-token"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the amount of records for request",
            "required": false,
            "type": "integer"
          },
          {
            "name": "data_name",
            "in": "query",
            "description": "actual data name. Use as example: 'press=5'",
            "required": false,
            "type": "string"
          },
          {
            "name": "host",
            "in": "query",
            "description": "data host",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag",
            "in": "query",
            "description": "tag to specify certain type of services; separate it by comas as in 'tag=Cebola,CebolaRoxa'",
            "required": false,
            "type": "string"
          },
          {
            "name": "service_id",
            "in": "query",
            "description": "filters all data of an specified service_id.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Will order the documents by the time they were processed (server time). Be aware of the combination LIMIT and ORDER, which gives preference to ORDER.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "required": [
                "code",
                "values"
              ],
              "title": "Service",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "example": 200
                },
                "values": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Data"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error400"
            }
          },
          "401": {
            "description": "Invalid or expired token",
            "schema": {
              "$ref": "#/definitions/Error401"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error403"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "$ref": "#/definitions/Error429"
            }
          }
        }
      }
    },
    "/data/register/": {
      "post": {
        "tags": [
          "data"
        ],
        "description": "Register some data",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "description": "an array of data to be registered",
            "schema": {
              "$ref": "#/definitions/DataRegister"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TokenResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error400"
            }
          },
          "401": {
            "description": "Invalid or expired token",
            "schema": {
              "$ref": "#/definitions/Error401"
            }
          },
          "403": {
            "description": "Forbbiden",
            "schema": {
              "$ref": "#/definitions/Error403"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/Error422"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "$ref": "#/definitions/Error429"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ClientRegister": {
      "required": [
        "name",
        "chipset",
        "mac",
        "serial",
        "processor",
        "channel",
        "client_time",
        "tag"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Raspberry PI"
        },
        "chipset": {
          "type": "string",
          "example": "AMD 790FX"
        },
        "mac": {
          "type": "string",
          "example": "FF:FF:FF:FF:FF:FF"
        },
        "serial": {
          "type": "string",
          "example": "C210"
        },
        "processor": {
          "type": "string",
          "example": "Intel I3"
        },
        "channel": {
          "type": "string",
          "example": "Ethernet"
        },
        "client_time": {
          "type": "integer",
          "example": 1317427200
        },
        "tag": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "cebola"
          }
        }
      }
    },
    "ClientRevalidate": {
      "required": [
        "token",
        "services"
      ],
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "example": "4c9adfb96a364c6805b28f90a342b65c"
        },
        "services": {
          "type": "array",
          "items": {
            "type": "integer",
            "example": 13
          }
        }
      }
    },
    "Client": {
      "required": [
        "name",
        "chipset",
        "mac",
        "serial",
        "processor",
        "channel",
        "client_time",
        "server_time",
        "token",
        "services",
        "tag"
      ],
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "example": "Ethernet"
        },
        "chipset": {
          "type": "string",
          "example": "AMD 790FX"
        },
        "mac": {
          "type": "string",
          "example": "FF:FF:FF:FF:FF:FF"
        },
        "name": {
          "type": "string",
          "example": "Raspberry PI"
        },
        "processor": {
          "type": "string",
          "example": "Intel I3"
        },
        "serial": {
          "type": "string",
          "example": "C210"
        },
        "services": {
          "$ref": "#/definitions/Services"
        },
        "client_time": {
          "type": "integer",
          "example": 1317427200
        },
        "server_time": {
          "type": "integer",
          "example": 1317427200
        },
        "token": {
          "type": "string",
          "example": "0e62354889cbc6f08f9e92521d389157"
        },
        "tag": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "cebola"
          }
        }
      }
    },
    "DataRegister": {
      "type": "object",
      "required": [
        "data",
        "token",
        "client_time"
      ],
      "properties": {
        "token": {
          "type": "string",
          "example": "4c9adfb96a364c6805b28f90a342b65c"
        },
        "client_time": {
          "type": "integer",
          "example": 342343242
        },
        "tag": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "Cebola"
          }
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Values"
          }
        }
      }
    },
    "Values": {
      "type": "object",
      "properties": {
        "service_id": {
          "type": "integer",
          "example": 0
        },
        "data_values": {
          "$ref": "#/definitions/DataValues"
        }
      }
    },
    "Data": {
      "required": [
        "data_values",
        "service_id",
        "client_time",
        "server_time"
      ],
      "type": "object",
      "properties": {
        "data_values": {
          "$ref": "#/definitions/DataValues"
        },
        "service_id": {
          "type": "integer",
          "example": 15
        },
        "client_time": {
          "type": "integer",
          "example": 1317427200
        },
        "server_time": {
          "type": "integer",
          "example": 1317987654
        },
        "tag": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "Cebola"
          }
        }
      }
    },
    "DataValues": {
      "type": "object",
      "properties": {
        "press": {
          "type": "integer",
          "example": 35
        }
      }
    },
    "ServicesRegister": {
      "type": "object",
      "required": [
        "token",
        "services",
        "client_time"
      ],
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceRegister"
          }
        },
        "token": {
          "type": "string",
          "example": "4c9adfb96a364c6805b28f90a342b65c"
        },
        "client_time": {
          "type": "integer",
          "example": 1317427200
        },
        "tag": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "Cebola"
          }
        }
      }
    },
    "ServiceRegister": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Get temp"
        },
        "parameters": {
          "$ref": "#/definitions/Parameter"
        },
        "return_type": {
          "type": "string",
          "example": "float"
        }
      }
    },
    "Service": {
      "type": "object",
      "required": [
        "name",
        "parameters",
        "return_type",
        "service_id"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Get temp"
        },
        "parameters": {
          "$ref": "#/definitions/Parameter"
        },
        "return_type": {
          "type": "string",
          "example": "float"
        },
        "service_id": {
          "type": "integer",
          "example": 0
        }
      }
    },
    "ServicesList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceValues"
      }
    },
    "ServiceValues": {
      "type": "object",
      "required": [
        "client_time",
        "server_time",
        "token",
        "services"
      ],
      "properties": {
        "client_time": {
          "type": "integer",
          "example": 4324342342
        },
        "server_time": {
          "type": "integer",
          "example": 43243423421
        },
        "token": {
          "type": "string",
          "example": "7c5307af813437e7bac2b9f011d24e21"
        },
        "tag": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "Cebola"
          }
        },
        "services": {
          "$ref": "#/definitions/Services"
        }
      }
    },
    "Services": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Service"
      }
    },
    "Parameter": {
      "type": "object",
      "required": [
        "example_parameter"
      ],
      "properties": {
        "example_parameter": {
          "type": "string",
          "example": "float"
        }
      }
    },
    "Error400": {
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Invalid Parameters (Bad request)"
        }
      }
    },
    "Error401": {
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "example": 401
        },
        "message": {
          "type": "string",
          "example": "Unauthorized"
        }
      }
    },
    "Error403": {
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "example": 403
        },
        "message": {
          "type": "string",
          "example": "Forbidden"
        }
      }
    },
    "Error422": {
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "example": 422
        },
        "message": {
          "type": "string",
          "example": "Unprocessable Entity"
        }
      }
    },
    "Error429": {
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "example": 429
        },
        "message": {
          "type": "string",
          "example": "Too many requests"
        }
      }
    },
    "TokenResponseRegister": {
      "type": "object",
      "required": [
        "code",
        "message",
        "token",
        "services"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "Success"
        },
        "token": {
          "type": "string",
          "example": "4c9adfb96a364c6805b28f90a342b65c"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceRegisterResponse"
          }
        }
      }
    },
    "ServiceRegisterResponse": {
      "type": "object",
      "required": [
        "service_id",
        "service_name"
      ],
      "properties": {
        "service_id": {
          "type": "number",
          "example": 1151
        },
        "service_name": {
          "type": "string",
          "example": "Get temp"
        }
      }
    },
    "TokenResponseClient": {
      "type": "object",
      "required": [
        "code",
        "message",
        "token"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "Success"
        },
        "token": {
          "type": "string",
          "example": "AAFFAAFFAAFFAAFF"
        }
      }
    },
    "TokenResponse": {
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "Success"
        }
      }
    }
  }
}
